{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport { setAlert } from './alert';\nimport { SIGNUP_SUCCESS, SIGNUP_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT } from './types'; // LOAD USER\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/user/me');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //SIGNUP USER\n\nexport const signup = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const options = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/auth/signup', body, options);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n  }\n}; // LOGIN USER\n\nexport const login = (email, password) => async dispatch => {\n  const options = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/auth/login', body, options);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // LOGOUT\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/karolinaobcowska/Desktop/Praca inzÌ‡ynierska/frontend/src/actions/auth.js"],"names":["axios","setAuthToken","setAlert","SIGNUP_SUCCESS","SIGNUP_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","loadUser","dispatch","localStorage","token","res","get","type","payload","data","error","signup","name","email","password","options","headers","body","JSON","stringify","post","errors","err","response","forEach","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport { setAlert } from './alert'\n\nimport {\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_FAIL,\n    LOGIN_SUCCESS,\n    LOGOUT\n} from './types';\n\n// LOAD USER\nexport const loadUser = () => async dispatch => {\n    if (localStorage.token) {\n        setAuthToken(localStorage.token)\n    }\n\n    try {\n        const res = await axios.get('/user/me');\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        })\n    } catch (error) {\n        dispatch({\n            type: AUTH_ERROR\n        })\n    }\n}\n\n//SIGNUP USER\nexport const signup = ({ name, email, password }) => async dispatch => {\n    const options = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ name, email, password })\n\n    try {\n        const res = await axios.post('/auth/signup', body, options)\n        dispatch({\n            type: SIGNUP_SUCCESS,\n            payload: res.data\n        });\n        dispatch(loadUser());\n    } catch (error) {\n        const errors = err.response.data.errors;\n        if (errors) {\n            errors.forEach(error => \n                dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: SIGNUP_FAIL\n        })\n    }\n}\n\n// LOGIN USER\nexport const login = ( email, password ) => async dispatch => {\n    const options = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n    const body = JSON.stringify({ email, password })\n\n    try {\n        const res = await axios.post('/auth/login', body, options);\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        })\n        dispatch(loadUser());\n    } catch (error) {\n        const errors = err.response.data.errors;\n        if (errors) {\n            errors.forEach(error => \n                dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: LOGIN_FAIL\n        })\n    }\n}\n\n// LOGOUT\nexport const logout = () => dispatch => {\n    dispatch({ type: LOGOUT })\n}"]},"metadata":{},"sourceType":"module"}